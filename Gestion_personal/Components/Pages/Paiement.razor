@page "/paiement"
@using GestionPersonnel.Models.Salaires
@using GestionPersonnel.Services
@inject ISalaireService SalaireService
@inject IPDFService PDFService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="panel-employe">
    <div class="title">
        <h1>Paiement</h1>
    </div>
    <div class="option-employe">
        <div class="input-group w-50">

            <input type="text" class="form-control" placeholder="Search" @bind="searchTerm" @oninput="SearchPaiement">
            <input type="date" class="form-control" @bind="selectedDate" />
                <button class="btn-p" type="button" @onclick="GetSalariesByMonth">
                    <i class="fa-solid fa-magnifying-glass"></i>
                </button>
        
        </div>
        <button class="btn-p" @onclick="Show_Popup_Paiement">Ajouter Employeur Paiement</button>
    </div>

    <div class="tab-employe">
        <table class="table">
            <thead>
                <tr>
                    <th>Nom et Prenom</th>
                    <th>Fonction</th>
                    <th>Type Paiement</th>
                    <th>Salaire</th>
                    <th>Primes</th>
                    <th>Avances</th>
                    <th>Dettes</th>
                    <th>SalaireNet</th>
                    <th>Option</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredSalaries.Count == 0)
                {
                    <tr>
                        <td colspan="9" class="text-center">No found Paiement</td>
                    </tr>
                }
                else
                {
                    @foreach (var salaire in filteredSalaries)
                    {
                        <tr>
                            <td class="text-left align-middle">@salaire.NomEmploye @salaire.PrenomEmploye</td>
                            <td class="text-center align-middle">@salaire.NomFonction</td>
                            <td class="text-center align-middle">@salaire.TypePaiement</td>
                            <td class="text-center align-middle">@salaire.Salaire</td>
                            <td class="text-center align-middle">@salaire.Primes</td>
                            <td class="text-center align-middle">@salaire.Avances</td>
                            <td class="text-center align-middle">@salaire.Dettes</td>
                            <td class="text-center align-middle">@salaire.SalaireNet</td>
                            <td class="text-center align-middle">
                                <button class="btn-d px-3 py-2" @onclick="() => GeneratePDF(salaire)">
                                    <i class="bi bi-filetype-pdf" style="font-weight:bold; font-size:18px;"></i>
                                </button>
                            </td>
                        </tr>
                    }

                }

            </tbody>
        </table>
    </div>
</div>

<NewpaiementPopUp IsVisible="@IsPopupVisible" OnClose="@Hide_Popup_Paiement" />

@code {
    private List<SalaireDetail> salaireDetails = new List<SalaireDetail>();
    private List<SalaireDetail> filteredSalaries = new List<SalaireDetail>();
    private string searchTerm;
    private DateTime? selectedDate = DateTime.Now.Date;
    private bool IsPopupVisible = false;

    private void Show_Popup_Paiement()
    {
        IsPopupVisible = true;
        StateHasChanged(); // Ensure the UI updates when showing the popup
    }

    private void Hide_Popup_Paiement()
    {
        IsPopupVisible = false;
        StateHasChanged(); // Ensure the UI updates when hiding the popup
    }

    protected override async Task OnInitializedAsync()
    {
        salaireDetails = await SalaireService.GetSalariesByMonthAsync(selectedDate.Value);
        filteredSalaries = salaireDetails;
    }

    private async Task GetSalariesByMonth()
    {
        if (selectedDate.HasValue)
        {
            salaireDetails = await SalaireService.GetSalariesByMonthAsync(selectedDate.Value);
        }
       
        FilterSalaries();
    }

    private void SearchPaiement(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        FilterSalaries();
    }

    private void FilterSalaries()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredSalaries = salaireDetails;
        }
        else
        {
            filteredSalaries = salaireDetails.Where(s =>
               !string.IsNullOrEmpty(s.NomEmploye) && s.NomEmploye.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
               !string.IsNullOrEmpty(s.PrenomEmploye) && s.PrenomEmploye.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
               !string.IsNullOrEmpty(s.NomFonction) && s.NomFonction.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private async Task GeneratePDF(SalaireDetail salaire)
    {
        var pdfBytes = await PDFService.GenerateSalairePDFAsync(salaire);
        var base64String = Convert.ToBase64String(pdfBytes);
        var fileName = "FicheDePaie.pdf";

        await JSRuntime.InvokeVoidAsync("downloadFile", $"data:application/pdf;base64,{base64String}", fileName);
    }
}