@page "/pointage"
@using ModelsPointage = GestionPersonnel.Models.Pointage
@using GestionPersonnel.Models.Employe
@using GestionPersonnel.Services
@inject IPointageService PointageService
@rendermode InteractiveServer

<div class="panel-employe">
    <div class="title">
        <h1>Pointage</h1>
    </div>
    <div class="option-employe">

        <div class="input-group w-25">
            <input type="text" class="form-control" placeholder="Search" @bind-value="searchTerm" @oninput="Searchpointage" />
            <button class="btn-p" type="button">
                <i class="fa-solid fa-magnifying-glass"></i>
            </button>
        </div>


        <div class="btn-employe">
            <input type="date" class="form-control" @bind="selectedDate" />
            <button class="btn-p" @onclick="GetPointageByDate">Get</button>
        </div>
    </div>


    <div class="tab-employe">
        <table class="table">
            <thead>
                <tr>

                    <th>Nom Prenom</th>
                    <th>Fonction</th>
                    <th>Status</th>
                    <th>Heur</th>
                    <th>Pourcentage</th>
                    <th>Remarque</th>
                    <th>Option</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredPointages.Count == 0 || selectedDate == null)
                {
                    <tr>
                        <td colspan="9" class="text-center">No found Pointage</td>
                    </tr>

                }
                else
                {
                    @foreach (var pointage in filteredPointages)
                    {
                        <tr>
                            <td class="text-left align-middle">@pointage.NomEmploye @pointage.PrenomEmploye</td>
                            <td class="text-center align-middle">@pointage.NomFonction</td>
                            <td class="text-center align-middle">@pointage.Stat</td>
                            <td class="text-center align-middle">@pointage.HeuresTravaillees</td>
                            <td class="text-center align-middle">
                                @pointage.JourneeCoefficient<span>%</span>
                            </td>
                            <td class="text-center align-middle">@pointage.Remarque</td>
                            <td class="text-center align-middle">
                                <button class="btn-p px-3 py-2" @onclick="() => Show_Popup_UpdatePointage(pointage)">
                                    <i class="fa-solid fa-pen-to-square"></i>
                                </button>
                            </td>
                        </tr>

                    }
                }
            </tbody>
        </table>
    </div>
</div>

<NewPointagePopUp IsVisiblePointage="@isVisiblePointage"
                  OnClose="Hide_Popup_UpdatePointage"
                  Pointage="selectedPointage" />


@code {
    private string searchTerm = string.Empty;
    private DateTime? selectedDate = DateTime.Now.Date;
    private List<ModelsPointage.Pointage> pointages;
    private List<ModelsPointage.Pointage> filteredPointages;
    private bool isVisiblePointage = false;
    private ModelsPointage.Pointage selectedPointage;

    private void Show_Popup_UpdatePointage(ModelsPointage.Pointage pointage)
    {
        if (pointage != null)
        {
            selectedPointage = pointage;
            isVisiblePointage = true;
        }
    }

    private void Hide_Popup_UpdatePointage()
    {
        isVisiblePointage = false;
    }

    protected override async Task OnInitializedAsync()
    {
        pointages = await PointageService.GetByDate(selectedDate.Value);
        filteredPointages = pointages;
    }

    private async Task GetPointageByDate()
    {
        pointages = await PointageService.GetByDate(selectedDate.Value);
     
        FilterPointages();
    }


    private void Searchpointage(ChangeEventArgs changeEvent)
    {
        searchTerm = changeEvent.Value.ToString();
        FilterPointages();
    }

    private async void FilterPointages()
    {

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredPointages = pointages;
        }
        else
        {
            filteredPointages = pointages.Where(p =>
               !string.IsNullOrEmpty(p.NomEmploye) && p.NomEmploye.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
               !string.IsNullOrEmpty(p.PrenomEmploye) && p.PrenomEmploye.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
               !string.IsNullOrEmpty(p.NomFonction) && p.NomFonction.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}