@page "/generate-pdf"
@using GestionPersonnel.Models.Avances
@using GestionPersonnel.Services
@inject IPdfService PdfService
@inject IAvanceService AvanceService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@if (IsVisibleFicheAvance)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="modal-dialog w-100">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Fiche des Avances</h5>
                   
                </div>
                <div class="modal-body">
                    <div class="ption-employe d-flex justify-content-between" style="height:40px">
                        <div class="d-flex">
                            <input type="date" class="form-control" style="width:200px" @bind="selectedDate">
                            <button @onclick="GetAvances" class="btn-p"><i class="fa-solid fa-magnifying-glass"></i></button>
                        </div>
                        <button @onclick="GeneratePdf" class="btn-p " style="font-size:15px">Gerer Fiche</button>

                    </div>
                    <div class="tab-employe">
                        <div style="overflow-y: auto; max-height: 200px;">
                            <table class="table" id="avancesTable">
                                <thead>
                                    <tr>
                                        <th>Nom Prenom</th>
                                        <th>Valeur Avances</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (avances != null && avances.Any())
                                    {
                                        @foreach (var avance in avances)
                                        {
                                            <tr>
                                                <td>@avance.NomEmployee @avance.PrenomEmployee</td>
                                                <td>@avance.Montant.ToString("0.00") DA</td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4" style="text-align:center">Aucune avance trouvée pour cette date</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="modal-footer">
                            <button type="button" @onclick="@Hide_Popup_FicheAvance" class="btn-c"> Annuler </button>
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>
        .modal-footer {
            display: flex;
            justify-content: flex-end;}
    </style>
}


@code {
    [Parameter] public bool IsVisibleFicheAvance { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }


    private DateTime? selectedDate =  DateTime.Now.Date;
    private List<Avance> avances;
    private string media;

    private void Hide_Popup_FicheAvance()
    {
        OnClose.InvokeAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        avances = new List<Avance>();
    }

    private async Task GetAvances()
    {
        if (selectedDate.HasValue)
        {
            avances = await AvanceService.GetAvancesWithEmployee(selectedDate.Value);
            Console.WriteLine(selectedDate);
            Console.WriteLine(avances);
        }
    }

    private async Task GeneratePdf()
    {
        if (selectedDate.HasValue && avances != null && avances.Any())
        {
            var pdfData = await PdfService.GenerateAvancePdfAsync(avances, selectedDate.Value);

            // Save or prompt download the PDF
            var fileName = $"Avances_Report_{selectedDate.Value:yyyy-MM-dd}.pdf";
            await SaveFile(pdfData, fileName);
        }
    }

    private async Task SaveFile(byte[] fileData, string fileName)
    {
        // Using JSRuntime to trigger file download
        var base64Data = Convert.ToBase64String(fileData);
        await JSRuntime.InvokeVoidAsync("downloadFile", $"data:application/pdf;base64,{base64Data}", fileName);
    }

  
}


