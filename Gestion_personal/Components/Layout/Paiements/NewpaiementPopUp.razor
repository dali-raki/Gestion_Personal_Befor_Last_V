@using GestionPersonnel.Models.SalairesBase
@using GestionPersonnel.Models.TypeDePaiment
@using GestionPersonnel.Services
@using Implementation.Services.SalaireBase
@if (IsVisible)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="modal-dialog w-50">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Ajouter Employeur Paiement</h5>
                  
                </div>
                <div class="modal-body">
                    <form @onsubmit="HandleFormSubmit">
                        <div class="form-group">
                            <label>Choisir Employe</label>
                            <select @onchange="OnEmployeeChange" class="form-control">
                                <option value="">-- Choisir Employe --</option>
                                @if (employes != null)
                                {
                                    @foreach (var employe in employes)
                                    {
                                        <option value="@employe.EmployeID">@employe.Nom @employe.Prenom</option>
                                    }
                                }
                                else
                                {
                                    <option>-- Null --</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Fonction</label>
                            <input type="text" class="form-control" placeholder="Fonction" @bind="fonction" readonly />
                        </div>

                        <div class="form-group">
                            <label>Choisir Type de Paiement</label>
                            <select @bind="selectedTypePaiementId" class="form-control">
                                <option value="">-- Choisir Type Paiement --</option>
                                @if (typeDePaiements != null)
                                {
                                    @foreach (var typepaiment in typeDePaiements)
                                    {
                                        <option value="@typepaiment.TypePaiementID">@typepaiment.NomTypePaiement</option>
                                    }
                                }
                                else
                                {
                                    <option>-- Null --</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Salaire</label>
                            <input type="text" class="form-control" placeholder="Salaire" @bind="salaire" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn-c" @onclick="ClosePopup">Annuler</button>
                            <button type="submit" class="btn-p">Ajouter Paiment</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private List<Employe> employes;
    private List<TypeDePaiement> typeDePaiements;
    private string selectedEmployeId;
    private string selectedTypePaiementId;
    private string salaire;
    private string fonction;
    private Employe selectedEmploye;

    [Inject] private IEmployeService EmployeService { get; set; }
    [Inject] private ITypeDePaiementService TypeDePaiementService { get; set; }
    [Inject] private ISalaireBaseService SalairesBaseService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        employes = await EmployeService.GetEmployeesAsync();
        typeDePaiements = await TypeDePaiementService.GetAllAsync();
    }

    private async Task HandleFormSubmit()
    {
        if (!string.IsNullOrEmpty(selectedEmployeId) && !string.IsNullOrEmpty(selectedTypePaiementId) && !string.IsNullOrEmpty(salaire))
        {
            var salairesBase = new SalairesBase
                {
                    EmplyeId = int.Parse(selectedEmployeId),
                    TypePaiementID = int.Parse(selectedTypePaiementId),
                    SalaireBase = decimal.Parse(salaire),
                };

            await SalairesBaseService.Add(salairesBase);
            ClosePopup();
        }
    }

    private async Task OnEmployeeChange(ChangeEventArgs e)
    {
        selectedEmployeId = e.Value.ToString();

        if (!string.IsNullOrEmpty(selectedEmployeId))
        {
            selectedEmploye = employes.FirstOrDefault(emp => emp.EmployeID.ToString() == selectedEmployeId);

            if (selectedEmploye != null)
            {
                fonction = selectedEmploye.FonctionName;
            }
        }
    }

    private void ClosePopup()
    {
        OnClose.InvokeAsync();
    }
}
