@if (IsVisiblUpdateEquipe)
{
	<div class="modal" tabindex="-1" style="display: block;">
		<div class="modal-dialog">

			<div class="modal-content">

				<div class="modal-header">

					<h5 class="modal-title">Mise à Jour Equipe</h5>

				</div>
				<div class="modal-body">
					<EditForm Model="this" OnValidSubmit="UpdateEquipe">
						<div class="form-group">
							<label>Choisir L'Equipe</label>
							<select @onchange="OnEquipeChange" class="form-control">
								<option value="">-- Choisir L'Equipe --</option>
								@if (equipes != null && equipes.Any())
								{
									@foreach (var equipe in equipes)
									{
										<option value="@equipe.EquipeID">@equipe.NomEquipe</option>
									}
								}
								else
								{
									<option>-- Aucune Equipe Disponible --</option>
								}
							</select>
						</div>
						<div class="form-group">
							<label>Modifier Le Nom D'Equipe</label>
							<input type="text" class="form-control" placeholder="Nom D'Equipe" @bind="selectedEquipeName" />
						</div>
						<div class="form-group">
							<label>Modifier Le Chef D'Equipe</label>
							<select @bind="selectedChefId" class="form-control">
								<option value="">-- Choisir Le Chef D'Equipe --</option>
								@if (employes != null && employes.Any())
								{
									@foreach (var employe in employes)
									{
										<option value="@employe.EmployeID">@employe.Nom @employe.Prenom</option>
									}
								}
								else
								{
									<option>-- Aucun Employé Disponible --</option>
								}
							</select>
						</div>

						<label>Choisir Les Membres D'Equipe</label>
						<div class="checkbox-group scrollable">
							@if (allEmployees != null && allEmployees.Any())
							{
								@foreach (var employe in allEmployees)
								{
									<label class="checkbox-item">
										<input type="checkbox" value="@employe.EmployeID"
											   @onchange="e => OnMemberCheckboxChange(e, employe.EmployeID)"
											   checked="@selectedMemberIds.Contains(employe.EmployeID)">
										@employe.Nom @employe.Prenom
									</label>
								}
							}
							else
							{
								<p>Aucun Employé Disponible</p>
							}
						</div>
						<div class="modal-footer">
							<button type="button" class="btn-c" @onclick="Hide_popup_UpdateEquipe">Annuler</button>
							<button type="submit" class="btn-p">Mettre à Jour Equipe</button>
						</div>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
}

@rendermode InteractiveServer
@using GestionPersonnel.Models.EmplyeeEquipe
@using GestionPersonnel.Services
@using GestionPersonnel.Services.EquipeServices
@using Equipe = GestionPersonnel.Models.Equipe.Equipe
@using Employe = GestionPersonnel.Models.Employe.Employe
@inject IEmployeService EmployeService
@inject IEmployeeEquipeService EmployeeEquipeService
@inject IEquipeService EquipeService
@code {
	[Parameter] public bool IsVisiblUpdateEquipe { get; set; }
		[Parameter] public EventCallback OnClose { get; set; }

	private List<Employe> employes;
	private List<Employe> allEmployees;
	private List<Equipe> equipes;
	private List<int> selectedMemberIds = new();
	private string selectedEquipeName;
	private int? selectedChefId;
	private int? selectedEquipeId;

	protected override async Task OnInitializedAsync()
	{
		employes = await EmployeService.GetEmployeesAsync();
		equipes = await EquipeService.GetAllEquipesAsync();
	}
	protected override async Task OnParametersSetAsync()
	{

		if (IsVisiblUpdateEquipe)
		{
			employes = await EmployeService.GetEmployeesAsync();
			equipes = await EquipeService.GetAllEquipesAsync();
		}
	}
	private async Task OnEquipeChange(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value.ToString(), out var equipeId))
		{
			selectedEquipeId = equipeId;


			var selectedEquipe = await EquipeService.GetEquipeByIdAsync(equipeId);

			if (selectedEquipe != null)
			{
				selectedEquipeName = selectedEquipe.NomEquipe;
				selectedChefId = selectedEquipe.ChefEquipeID;


				selectedMemberIds = await EmployeeEquipeService.GetEmployeesByEquipeIdAsync(equipeId)
																		.ContinueWith(t => t.Result.Select(emp => emp.EmployeID).ToList());

				allEmployees = employes;
			}
		}
	}

	private void Hide_popup_UpdateEquipe() {
		IsVisiblUpdateEquipe = false;
		OnClose.InvokeAsync();
	}

	private void OnMemberCheckboxChange(ChangeEventArgs e, int employeId)
	{
		if ((bool)e.Value)
		{
			
			if (!selectedMemberIds.Contains(employeId))
				selectedMemberIds.Add(employeId);
		}
		else
		{
			
			selectedMemberIds.Remove(employeId);
		}
	}

	private async Task UpdateEquipe()
	{
		if (selectedEquipeId.HasValue)
		{
			
			var updatedEquipe = new Equipe
				{
					EquipeID = selectedEquipeId.Value,
					NomEquipe = selectedEquipeName,
					ChefEquipeID = selectedChefId
				};

		
			await EquipeService.UpdateEquipeAsync(updatedEquipe);

		
			var existingMembers = await EmployeeEquipeService.GetEmployeesByEquipeIdAsync(selectedEquipeId.Value);
			var currentMemberIds = selectedMemberIds.ToHashSet();

			foreach (var existingMember in existingMembers)
			{
				if (!currentMemberIds.Contains(existingMember.EmployeID))
				{
				
					await EmployeeEquipeService.DeleteEmployeeEquipeAsync(existingMember.EmployeID);
				}
			}

			
			foreach (var employeId in selectedMemberIds)
			{
				if (!existingMembers.Any(em => em.EmployeID == employeId))
				{
					
					var newEmployeeEquipe = new EmployeeEquipe
						{
							EquipeeID = selectedEquipeId.Value,
							EmployeeID = employeId,

						};
					await EmployeeEquipeService.AddEmployeeEquipeAsync(newEmployeeEquipe);
				}
			}

			
			await OnClose.InvokeAsync();
		}
	}
}



