@using GestionPersonnel.Models.Employe
@using GestionPersonnel.Models.EmplyeeEquipe
@using GestionPersonnel.Models.Equipe
@using GestionPersonnel.Services
@using GestionPersonnel.Services.EquipeServices
@inject IPosteService PosteService
@inject IEquipeService EquipeService
@inject IEmployeService EmployeService
@rendermode InteractiveServer

@if (IsVisibleAddPost)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="modal-dialog">

            <div class="modal-content">

                <div class="modal-header">

                    <h5 class="modal-title">Ajouter Post</h5>
                </div>
                <div class="modal-body">
                    <form @onsubmit="HandleSubmit">
                        <div class="form-group">
                            <label>Date De Fin De Poste</label>
                            <input type="date" class="form-control" @bind="DateFin" required />
                        </div>
                        <div class="form-group">
                            <label>ID Post</label>
                            <input type="text" class="form-control" @bind="IdPoste" required />
                        </div>
                        <div class="form-group">
                            <label>Choisir L'Equipe</label>
                            <select @onchange="OnEquipeChanged" class="form-control">
                                <option value="">-- Choisir L'Equipe --</option>
                                @if (equipes != null && equipes.Any())
                                {
                                    @foreach (var equipe in equipes)
                                    {
                                        <option value="@equipe.EquipeID">@equipe.NomEquipe</option>
                                    }
                                }
                                else
                                {
                                    <option>-- Aucune Equipe Disponible --</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Choisir Les Membres Qui Finissent Le Post</label>
                            <div class="checkbox-group scrollable">
                                @if (employees != null)
                                {
                                    @foreach (var employe in employees)
                                    {
                                        <label class="checkbox-item">
                                            <input type="checkbox" value="@employe.EmployeID" @onclick="() => ToggleEmployeeSelection(employe.EmployeID)" />
                                            @employe.Nom @employe.Prenom
                                        </label>
                                        <br />
                                    }
                                }
                                else
                                {
                                    <p>Loading employees...</p>
                                }
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn-c" @onclick="Hide_Popup_AddPost">Annuler</button>
                            <button type="submit" class="btn-p">Ajouter Poste</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisibleAddPost { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<EquipesInfos> OnSave { get; set; }

    private List<Employe> employees;
    private List<Equipe> equipes;
    private List<EmployeeEquipe> employeeequipe;
    private List<int> SelectedEmployeeIds { get; set; } = new List<int>();

    private void Hide_Popup_AddPost() {
        IsVisibleAddPost = false;
        OnClose.InvokeAsync();
    }

  
    private DateTime? DateFin { get; set; } = DateTime.Now;


    private string IdPoste { get; set; }
    private int? SelectedEquipeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        /*equipes = await EquipeService.GetAllEquipesAsync();
        */
        LoadEquipe();

    }

    public async  void LoadEquipe()
    {
        equipes = await EquipeService.GetAllEquipesAsync();


    }

    protected override async Task OnParametersSetAsync()
    {

        if (IsVisibleAddPost)
        {
            equipes = await EquipeService.GetAllEquipesAsync();
        }
    }
    private async Task OnEquipeChanged(ChangeEventArgs e)
    {
        
        var selectedEquipeId = e.Value.ToString();
        SelectedEquipeId = int.TryParse(selectedEquipeId, out var id) ? id : (int?)null;
        Console.WriteLine(selectedEquipeId);
       
        if (SelectedEquipeId.HasValue)
        {
            employees = await EquipeService.GetEmployeesByEquipeIdAsync(SelectedEquipeId.Value);
        }
    }

    private void ToggleEmployeeSelection(int employeeId)
    {
        if (SelectedEmployeeIds.Contains(employeeId))
        {
            SelectedEmployeeIds.Remove(employeeId); 
        }
        else
        {
            SelectedEmployeeIds.Add(employeeId); 
        }
    }

    private async Task HandleSubmit()
    {
        if (!string.IsNullOrEmpty(IdPoste) && SelectedEquipeId.HasValue && SelectedEmployeeIds.Any())
        {
            // Ensure DateFin is not null before calling the service
            await PosteService.InsererDonneesPoste(IdPoste, SelectedEquipeId.Value, DateFin ?? DateTime.MinValue, SelectedEmployeeIds);
            await OnSave.InvokeAsync();
            Hide_Popup_AddPost();
            
        }
        else
        {
            // Handle form validation if necessary
            Console.WriteLine("Please fill in all the fields.");
            Hide_Popup_AddPost();
        }
       
    }

    
}


